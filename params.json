{"name":"Jnsolve","tagline":"Solves numerically equations and makes best fit of data given.","body":"# JNsolve\r\n\r\n\r\n## Introduction\r\n\r\nSolve numerically equations and calculate best fit to a data array given, also provides a series of numeric routines usable.\r\n\r\n\r\n## Installation\r\n\r\n```bash\r\n$ npm install jnsolve\r\n```\r\n\r\n\r\n## Features\r\n\r\n\r\n- **JNsolve bestfit**\r\n- **JNsolve regulafalsi**\r\n- **JNsolve fixedpoint**\r\n- **JNsolve bisection**\r\n- **JNsolve Newton-Raphson**\r\n- **JNsolve Newton-Raphson-Higher-Order**\r\n- **JNsolve Derivative Numerical**\r\n- **JNsolve FindRoot**\r\n\r\n## API\r\n\r\n#### `JNsolve`\r\n\r\nInitialize `JNsolve`\r\n\r\n```js\r\nvar JNsolve = require('JNsolve');\r\n```\r\n\r\n#### `JNsolve#D`\r\n\r\nObject with differents numerics methods to calculate the derivative of function given.\r\n\r\n##### `JNsolve#D#Nof(Function,Number,Array)`\r\nConstructor that generates the numeric derivative of `Function` with a  `Number` given of divisions in an interval ( `Array` => [a,b]).\r\n\r\n```js\r\nJNsolve.D.Nof(f,1000,[2,7])\r\n```\r\n\r\n##### `JNsolve#D#Nof#f_x`\r\nIs a instance method what is the derivative numerical of  `Function` with a   `Number` given of divisions in an interval (  `Array` => [a,b]).\r\n\r\n```js\r\nJNsolve.D.Nof(f,1000,[2,7]).f_x(3)\r\n```\r\nis a aproximation to the derivative of f (df_dx) on 3 with the 1000 divisions in the interval [2,7].\r\n\r\n\r\n\r\n##### `JNsolve#D#linear_interpolation(Array)`\r\nIs a constructor that generates the numeric linear interpolation of data given in `Array`= [[x_1,y_2],[x_2,y_3],...[x_n,y_n]] in the interval [x_1,x_n].\r\n\r\n```js\r\nJNsolve.D.linear_interpolation([[0,3.2],[1,4.6],[2,5.1],[4,6.9]])\r\n```\r\n##### `JNsolve#D#linear_interpolation(Array)#function_interpolated`\r\nIs a instance method what is the interpolated function of `Array` given.\r\n\r\n```js\r\nJNsolve.D.linear_interpolation([[0,3.2],[1,4.6],[2,5.1],[4,6.9]]).function_interpolated(2.5)\r\n```\r\nIs a aproximation interpolated to the `Array` = [[0,3.2],[1,4.6],[2,5.1],[4,6.9]].\r\n\r\n#### `JNsolve#nsolveqn(Function, Array[,Number,Object])`\r\nIs a method that calculate numerically the solution of `Function`=>f(x)=0 try in the interval (`Array`=>[a,b]) beginning  on `Number`=>x_0 (initial point).\r\n\r\n```js\r\nJNsolve.nsolveqn(x+Math.cos(x),0.5,[0,1]) = 0.73952\r\n```\r\nThe `Object`is default options and are { npoints_DNumeric : 1000, presicion : 0.001 , nstepsmax : 1000 , method : 'Newton_Rapshon' }. The mothods available are RegulaFalsi, bisection,fixedpoint,Newton_Raphson_Higherorder, Newton_Raphson_Higherorder. The rest of routines for every method are availables:\r\n\r\n#### `JNsolve#RegulaFalsi(Function,Array[,Object])`\r\n#### `JNsolve#bisection(Function, Array[,Object])`\r\n#### `JNsolve#fixedpoint(Function,Number[,Object])`\r\n#### `JNsolve#Newton_Raphson(Function,Array[, Number, Object])`\r\n#### `JNsolve#Newton_Raphson_Higherorder(Function,Array[, Number, Object])`\r\n\r\nin every case if x_0 is undefined, is taken from a random number  in interval `Array`=>[a,b]. All these methods return a object with properties Root, numSteps and method used.\r\n\r\n#### `JNsolve#findroot(Function, Array[,Number,Object])`\r\nIs a method that calculate numerically the solution of `Function`=>f(x)=0 try in the interval (`Array`=>[a,b]) beginning  on `Number`=>x_0 (initial point).\r\n\r\n```js\r\nJNsolve.nsolveqn(x+Math.cos(x),0.5,[0,1]) = 0.73952\r\n```\r\nThe `Object`is default options and are { npoints_DNumeric : 1000, presicion : 0.001 , nstepsmax : 1000 , method : 'Newton_Rapshon' }. Here, findroot try find the root of function by all methods availables in the module.\r\n\r\n\r\n#### `JNsolve#bestfit(Array[,Array,Array])`\r\nCaculate the best fit to de first `Array`= [[x_1,y_2],[x_2,y_3],...[x_n,y_n]] argument, the second  `Array` = [z_1,z_2...z_m] argument is the made query to be answered with the datas given, the third argument are the values of \"y\" for which is queried the values of \"x\" respective. Return a object with the properties: ans_ofY,ans_ofX, fitUsed, fitEquationUsed, fitParamsUsed, fitPointsUsed, fitWithError and fit.\r\n\r\n```js\r\nJNsolve.bestfit([[0,1.1],[1,4.6],[2,1.9],[4,15]],[3.4, 4.8, 8, 11], [8,8.5,15,20]) =\r\nfit = { ans_ofY: \r\n   [ [ 3.4, 10.503636363636366 ],\r\n     [ 4.8, 21.457999999999984 ],\r\n     [ 8, 62.92272727272717 ],\r\n     [ 11, 122.55181818181795 ] ],\r\n  ans_ofX: \r\n   [ [ 2.9665881626844426, 8 ],\r\n     [ 3.0592101464091335, 8.5 ],\r\n     [ 4.043974243768653, 15 ],\r\n     [ 4.641597409834032, 20 ] ],\r\n  fitUsed: 'polynomial',\r\n  fitEquationUsed: 'y = 1.12x^2 + -1.33x + 2.11',\r\n  fitParamsUsed: [ 2.1118181818181747, -1.3259090909090778, 1.1159090909090879 ],\r\n  fitPointsUsed: \r\n   [ [ 0, 2.1118181818181747 ],\r\n     [ 1, 1.9018181818181847 ],\r\n     [ 2, 3.9236363636363705 ],\r\n     [ 4, 14.662727272727269 ] ],\r\n  fitWithError: 2.0329834635543396,\r\n  fit: \r\n   { linear: { regression: [Object], error: 2.8540621486399553 },\r\n     exponential: { regression: [Object], error: 2.094639809897245 },\r\n     logarithmic: { regression: [Object], error: NaN },\r\n     power: { regression: [Object], error: NaN },\r\n     polynomial: { regression: [Object], error: 2.0329834635543396 },\r\n     best: { name: 'polynomial', error: 2.0329834635543396, f: [Function] } } }\r\n```\r\n\r\n\r\n\r\n##Contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style.\r\nAdd unit tests for any new or changed functionality. Lint and test your code.\r\n\r\n\r\n##Licence\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2015 Jes√∫s Edel Cereceres, 4yopping and all the related trademarks\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n","google":"UA-65980128-1","note":"Don't delete this file! It's used internally to help with page regeneration."}